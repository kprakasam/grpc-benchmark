/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var payloads_pb = require('./payloads_pb.js');
var stats_pb = require('./stats_pb.js');
goog.exportSymbol('proto.grpc.testing.ChannelArg', null, global);
goog.exportSymbol('proto.grpc.testing.ClientArgs', null, global);
goog.exportSymbol('proto.grpc.testing.ClientConfig', null, global);
goog.exportSymbol('proto.grpc.testing.ClientStatus', null, global);
goog.exportSymbol('proto.grpc.testing.ClientType', null, global);
goog.exportSymbol('proto.grpc.testing.ClosedLoopParams', null, global);
goog.exportSymbol('proto.grpc.testing.CoreRequest', null, global);
goog.exportSymbol('proto.grpc.testing.CoreResponse', null, global);
goog.exportSymbol('proto.grpc.testing.LoadParams', null, global);
goog.exportSymbol('proto.grpc.testing.Mark', null, global);
goog.exportSymbol('proto.grpc.testing.PoissonParams', null, global);
goog.exportSymbol('proto.grpc.testing.RpcType', null, global);
goog.exportSymbol('proto.grpc.testing.Scenario', null, global);
goog.exportSymbol('proto.grpc.testing.ScenarioResult', null, global);
goog.exportSymbol('proto.grpc.testing.ScenarioResultSummary', null, global);
goog.exportSymbol('proto.grpc.testing.Scenarios', null, global);
goog.exportSymbol('proto.grpc.testing.SecurityParams', null, global);
goog.exportSymbol('proto.grpc.testing.ServerArgs', null, global);
goog.exportSymbol('proto.grpc.testing.ServerConfig', null, global);
goog.exportSymbol('proto.grpc.testing.ServerStatus', null, global);
goog.exportSymbol('proto.grpc.testing.ServerType', null, global);
goog.exportSymbol('proto.grpc.testing.Void', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.PoissonParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.PoissonParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.PoissonParams.displayName = 'proto.grpc.testing.PoissonParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.PoissonParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.PoissonParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.PoissonParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.PoissonParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    offeredLoad: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.PoissonParams}
 */
proto.grpc.testing.PoissonParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.PoissonParams;
  return proto.grpc.testing.PoissonParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.PoissonParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.PoissonParams}
 */
proto.grpc.testing.PoissonParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOfferedLoad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.PoissonParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.PoissonParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.PoissonParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.PoissonParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOfferedLoad();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double offered_load = 1;
 * @return {number}
 */
proto.grpc.testing.PoissonParams.prototype.getOfferedLoad = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.grpc.testing.PoissonParams.prototype.setOfferedLoad = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ClosedLoopParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ClosedLoopParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ClosedLoopParams.displayName = 'proto.grpc.testing.ClosedLoopParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ClosedLoopParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ClosedLoopParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ClosedLoopParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ClosedLoopParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ClosedLoopParams}
 */
proto.grpc.testing.ClosedLoopParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ClosedLoopParams;
  return proto.grpc.testing.ClosedLoopParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ClosedLoopParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ClosedLoopParams}
 */
proto.grpc.testing.ClosedLoopParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ClosedLoopParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ClosedLoopParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ClosedLoopParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ClosedLoopParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.LoadParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.testing.LoadParams.oneofGroups_);
};
goog.inherits(proto.grpc.testing.LoadParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.LoadParams.displayName = 'proto.grpc.testing.LoadParams';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.testing.LoadParams.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpc.testing.LoadParams.LoadCase = {
  LOAD_NOT_SET: 0,
  CLOSED_LOOP: 1,
  POISSON: 2
};

/**
 * @return {proto.grpc.testing.LoadParams.LoadCase}
 */
proto.grpc.testing.LoadParams.prototype.getLoadCase = function() {
  return /** @type {proto.grpc.testing.LoadParams.LoadCase} */(jspb.Message.computeOneofCase(this, proto.grpc.testing.LoadParams.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.LoadParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.LoadParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.LoadParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.LoadParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    closedLoop: (f = msg.getClosedLoop()) && proto.grpc.testing.ClosedLoopParams.toObject(includeInstance, f),
    poisson: (f = msg.getPoisson()) && proto.grpc.testing.PoissonParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.LoadParams}
 */
proto.grpc.testing.LoadParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.LoadParams;
  return proto.grpc.testing.LoadParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.LoadParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.LoadParams}
 */
proto.grpc.testing.LoadParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.ClosedLoopParams;
      reader.readMessage(value,proto.grpc.testing.ClosedLoopParams.deserializeBinaryFromReader);
      msg.setClosedLoop(value);
      break;
    case 2:
      var value = new proto.grpc.testing.PoissonParams;
      reader.readMessage(value,proto.grpc.testing.PoissonParams.deserializeBinaryFromReader);
      msg.setPoisson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.LoadParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.LoadParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.LoadParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.LoadParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClosedLoop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.ClosedLoopParams.serializeBinaryToWriter
    );
  }
  f = message.getPoisson();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.PoissonParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClosedLoopParams closed_loop = 1;
 * @return {?proto.grpc.testing.ClosedLoopParams}
 */
proto.grpc.testing.LoadParams.prototype.getClosedLoop = function() {
  return /** @type{?proto.grpc.testing.ClosedLoopParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ClosedLoopParams, 1));
};


/** @param {?proto.grpc.testing.ClosedLoopParams|undefined} value */
proto.grpc.testing.LoadParams.prototype.setClosedLoop = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.testing.LoadParams.oneofGroups_[0], value);
};


proto.grpc.testing.LoadParams.prototype.clearClosedLoop = function() {
  this.setClosedLoop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.LoadParams.prototype.hasClosedLoop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PoissonParams poisson = 2;
 * @return {?proto.grpc.testing.PoissonParams}
 */
proto.grpc.testing.LoadParams.prototype.getPoisson = function() {
  return /** @type{?proto.grpc.testing.PoissonParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.PoissonParams, 2));
};


/** @param {?proto.grpc.testing.PoissonParams|undefined} value */
proto.grpc.testing.LoadParams.prototype.setPoisson = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.testing.LoadParams.oneofGroups_[0], value);
};


proto.grpc.testing.LoadParams.prototype.clearPoisson = function() {
  this.setPoisson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.LoadParams.prototype.hasPoisson = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.SecurityParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.SecurityParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.SecurityParams.displayName = 'proto.grpc.testing.SecurityParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.SecurityParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.SecurityParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.SecurityParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.SecurityParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    useTestCa: jspb.Message.getFieldWithDefault(msg, 1, false),
    serverHostOverride: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.SecurityParams}
 */
proto.grpc.testing.SecurityParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.SecurityParams;
  return proto.grpc.testing.SecurityParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.SecurityParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.SecurityParams}
 */
proto.grpc.testing.SecurityParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseTestCa(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerHostOverride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.SecurityParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.SecurityParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.SecurityParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.SecurityParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUseTestCa();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getServerHostOverride();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool use_test_ca = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.testing.SecurityParams.prototype.getUseTestCa = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.grpc.testing.SecurityParams.prototype.setUseTestCa = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string server_host_override = 2;
 * @return {string}
 */
proto.grpc.testing.SecurityParams.prototype.getServerHostOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.testing.SecurityParams.prototype.setServerHostOverride = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ChannelArg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.testing.ChannelArg.oneofGroups_);
};
goog.inherits(proto.grpc.testing.ChannelArg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ChannelArg.displayName = 'proto.grpc.testing.ChannelArg';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.testing.ChannelArg.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.grpc.testing.ChannelArg.ValueCase = {
  VALUE_NOT_SET: 0,
  STR_VALUE: 2,
  INT_VALUE: 3
};

/**
 * @return {proto.grpc.testing.ChannelArg.ValueCase}
 */
proto.grpc.testing.ChannelArg.prototype.getValueCase = function() {
  return /** @type {proto.grpc.testing.ChannelArg.ValueCase} */(jspb.Message.computeOneofCase(this, proto.grpc.testing.ChannelArg.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ChannelArg.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ChannelArg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ChannelArg} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ChannelArg.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    strValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ChannelArg}
 */
proto.grpc.testing.ChannelArg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ChannelArg;
  return proto.grpc.testing.ChannelArg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ChannelArg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ChannelArg}
 */
proto.grpc.testing.ChannelArg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ChannelArg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ChannelArg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ChannelArg} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ChannelArg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.testing.ChannelArg.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.testing.ChannelArg.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string str_value = 2;
 * @return {string}
 */
proto.grpc.testing.ChannelArg.prototype.getStrValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grpc.testing.ChannelArg.prototype.setStrValue = function(value) {
  jspb.Message.setOneofField(this, 2, proto.grpc.testing.ChannelArg.oneofGroups_[0], value);
};


proto.grpc.testing.ChannelArg.prototype.clearStrValue = function() {
  jspb.Message.setOneofField(this, 2, proto.grpc.testing.ChannelArg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ChannelArg.prototype.hasStrValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 int_value = 3;
 * @return {number}
 */
proto.grpc.testing.ChannelArg.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.testing.ChannelArg.prototype.setIntValue = function(value) {
  jspb.Message.setOneofField(this, 3, proto.grpc.testing.ChannelArg.oneofGroups_[0], value);
};


proto.grpc.testing.ChannelArg.prototype.clearIntValue = function() {
  jspb.Message.setOneofField(this, 3, proto.grpc.testing.ChannelArg.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ChannelArg.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ClientConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.ClientConfig.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.ClientConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ClientConfig.displayName = 'proto.grpc.testing.ClientConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.ClientConfig.repeatedFields_ = [1,13,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ClientConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ClientConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ClientConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ClientConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverTargetsList: jspb.Message.getField(msg, 1),
    clientType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    securityParams: (f = msg.getSecurityParams()) && proto.grpc.testing.SecurityParams.toObject(includeInstance, f),
    outstandingRpcsPerChannel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    clientChannels: jspb.Message.getFieldWithDefault(msg, 5, 0),
    asyncClientThreads: jspb.Message.getFieldWithDefault(msg, 7, 0),
    rpcType: jspb.Message.getFieldWithDefault(msg, 8, 0),
    loadParams: (f = msg.getLoadParams()) && proto.grpc.testing.LoadParams.toObject(includeInstance, f),
    payloadConfig: (f = msg.getPayloadConfig()) && payloads_pb.PayloadConfig.toObject(includeInstance, f),
    histogramParams: (f = msg.getHistogramParams()) && stats_pb.HistogramParams.toObject(includeInstance, f),
    coreListList: jspb.Message.getField(msg, 13),
    coreLimit: jspb.Message.getFieldWithDefault(msg, 14, 0),
    otherClientApi: jspb.Message.getFieldWithDefault(msg, 15, ""),
    channelArgsList: jspb.Message.toObjectList(msg.getChannelArgsList(),
    proto.grpc.testing.ChannelArg.toObject, includeInstance),
    messagesPerStream: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ClientConfig}
 */
proto.grpc.testing.ClientConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ClientConfig;
  return proto.grpc.testing.ClientConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ClientConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ClientConfig}
 */
proto.grpc.testing.ClientConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addServerTargets(value);
      break;
    case 2:
      var value = /** @type {!proto.grpc.testing.ClientType} */ (reader.readEnum());
      msg.setClientType(value);
      break;
    case 3:
      var value = new proto.grpc.testing.SecurityParams;
      reader.readMessage(value,proto.grpc.testing.SecurityParams.deserializeBinaryFromReader);
      msg.setSecurityParams(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutstandingRpcsPerChannel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientChannels(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAsyncClientThreads(value);
      break;
    case 8:
      var value = /** @type {!proto.grpc.testing.RpcType} */ (reader.readEnum());
      msg.setRpcType(value);
      break;
    case 10:
      var value = new proto.grpc.testing.LoadParams;
      reader.readMessage(value,proto.grpc.testing.LoadParams.deserializeBinaryFromReader);
      msg.setLoadParams(value);
      break;
    case 11:
      var value = new payloads_pb.PayloadConfig;
      reader.readMessage(value,payloads_pb.PayloadConfig.deserializeBinaryFromReader);
      msg.setPayloadConfig(value);
      break;
    case 12:
      var value = new stats_pb.HistogramParams;
      reader.readMessage(value,stats_pb.HistogramParams.deserializeBinaryFromReader);
      msg.setHistogramParams(value);
      break;
    case 13:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCoreListList(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoreLimit(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherClientApi(value);
      break;
    case 16:
      var value = new proto.grpc.testing.ChannelArg;
      reader.readMessage(value,proto.grpc.testing.ChannelArg.deserializeBinaryFromReader);
      msg.addChannelArgs(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessagesPerStream(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ClientConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ClientConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ClientConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ClientConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getClientType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSecurityParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.SecurityParams.serializeBinaryToWriter
    );
  }
  f = message.getOutstandingRpcsPerChannel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getClientChannels();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAsyncClientThreads();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getRpcType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLoadParams();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.grpc.testing.LoadParams.serializeBinaryToWriter
    );
  }
  f = message.getPayloadConfig();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      payloads_pb.PayloadConfig.serializeBinaryToWriter
    );
  }
  f = message.getHistogramParams();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      stats_pb.HistogramParams.serializeBinaryToWriter
    );
  }
  f = message.getCoreListList();
  if (f.length > 0) {
    writer.writePackedInt32(
      13,
      f
    );
  }
  f = message.getCoreLimit();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getOtherClientApi();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getChannelArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.grpc.testing.ChannelArg.serializeBinaryToWriter
    );
  }
  f = message.getMessagesPerStream();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
};


/**
 * repeated string server_targets = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.grpc.testing.ClientConfig.prototype.getServerTargetsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.grpc.testing.ClientConfig.prototype.setServerTargetsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ClientConfig.prototype.addServerTargets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.grpc.testing.ClientConfig.prototype.clearServerTargetsList = function() {
  this.setServerTargetsList([]);
};


/**
 * optional ClientType client_type = 2;
 * @return {!proto.grpc.testing.ClientType}
 */
proto.grpc.testing.ClientConfig.prototype.getClientType = function() {
  return /** @type {!proto.grpc.testing.ClientType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.grpc.testing.ClientType} value */
proto.grpc.testing.ClientConfig.prototype.setClientType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional SecurityParams security_params = 3;
 * @return {?proto.grpc.testing.SecurityParams}
 */
proto.grpc.testing.ClientConfig.prototype.getSecurityParams = function() {
  return /** @type{?proto.grpc.testing.SecurityParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.SecurityParams, 3));
};


/** @param {?proto.grpc.testing.SecurityParams|undefined} value */
proto.grpc.testing.ClientConfig.prototype.setSecurityParams = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.grpc.testing.ClientConfig.prototype.clearSecurityParams = function() {
  this.setSecurityParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientConfig.prototype.hasSecurityParams = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 outstanding_rpcs_per_channel = 4;
 * @return {number}
 */
proto.grpc.testing.ClientConfig.prototype.getOutstandingRpcsPerChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.testing.ClientConfig.prototype.setOutstandingRpcsPerChannel = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 client_channels = 5;
 * @return {number}
 */
proto.grpc.testing.ClientConfig.prototype.getClientChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.testing.ClientConfig.prototype.setClientChannels = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 async_client_threads = 7;
 * @return {number}
 */
proto.grpc.testing.ClientConfig.prototype.getAsyncClientThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.grpc.testing.ClientConfig.prototype.setAsyncClientThreads = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional RpcType rpc_type = 8;
 * @return {!proto.grpc.testing.RpcType}
 */
proto.grpc.testing.ClientConfig.prototype.getRpcType = function() {
  return /** @type {!proto.grpc.testing.RpcType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.grpc.testing.RpcType} value */
proto.grpc.testing.ClientConfig.prototype.setRpcType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional LoadParams load_params = 10;
 * @return {?proto.grpc.testing.LoadParams}
 */
proto.grpc.testing.ClientConfig.prototype.getLoadParams = function() {
  return /** @type{?proto.grpc.testing.LoadParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.LoadParams, 10));
};


/** @param {?proto.grpc.testing.LoadParams|undefined} value */
proto.grpc.testing.ClientConfig.prototype.setLoadParams = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.grpc.testing.ClientConfig.prototype.clearLoadParams = function() {
  this.setLoadParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientConfig.prototype.hasLoadParams = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PayloadConfig payload_config = 11;
 * @return {?proto.grpc.testing.PayloadConfig}
 */
proto.grpc.testing.ClientConfig.prototype.getPayloadConfig = function() {
  return /** @type{?proto.grpc.testing.PayloadConfig} */ (
    jspb.Message.getWrapperField(this, payloads_pb.PayloadConfig, 11));
};


/** @param {?proto.grpc.testing.PayloadConfig|undefined} value */
proto.grpc.testing.ClientConfig.prototype.setPayloadConfig = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.grpc.testing.ClientConfig.prototype.clearPayloadConfig = function() {
  this.setPayloadConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientConfig.prototype.hasPayloadConfig = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional HistogramParams histogram_params = 12;
 * @return {?proto.grpc.testing.HistogramParams}
 */
proto.grpc.testing.ClientConfig.prototype.getHistogramParams = function() {
  return /** @type{?proto.grpc.testing.HistogramParams} */ (
    jspb.Message.getWrapperField(this, stats_pb.HistogramParams, 12));
};


/** @param {?proto.grpc.testing.HistogramParams|undefined} value */
proto.grpc.testing.ClientConfig.prototype.setHistogramParams = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.grpc.testing.ClientConfig.prototype.clearHistogramParams = function() {
  this.setHistogramParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientConfig.prototype.hasHistogramParams = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated int32 core_list = 13;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.grpc.testing.ClientConfig.prototype.getCoreListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 13));
};


/** @param {!Array.<number>} value */
proto.grpc.testing.ClientConfig.prototype.setCoreListList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ClientConfig.prototype.addCoreList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.grpc.testing.ClientConfig.prototype.clearCoreListList = function() {
  this.setCoreListList([]);
};


/**
 * optional int32 core_limit = 14;
 * @return {number}
 */
proto.grpc.testing.ClientConfig.prototype.getCoreLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.grpc.testing.ClientConfig.prototype.setCoreLimit = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string other_client_api = 15;
 * @return {string}
 */
proto.grpc.testing.ClientConfig.prototype.getOtherClientApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.grpc.testing.ClientConfig.prototype.setOtherClientApi = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * repeated ChannelArg channel_args = 16;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpc.testing.ChannelArg>}
 */
proto.grpc.testing.ClientConfig.prototype.getChannelArgsList = function() {
  return /** @type{!Array.<!proto.grpc.testing.ChannelArg>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.testing.ChannelArg, 16));
};


/** @param {!Array.<!proto.grpc.testing.ChannelArg>} value */
proto.grpc.testing.ClientConfig.prototype.setChannelArgsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.grpc.testing.ChannelArg=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.ChannelArg}
 */
proto.grpc.testing.ClientConfig.prototype.addChannelArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.grpc.testing.ChannelArg, opt_index);
};


proto.grpc.testing.ClientConfig.prototype.clearChannelArgsList = function() {
  this.setChannelArgsList([]);
};


/**
 * optional int32 messages_per_stream = 18;
 * @return {number}
 */
proto.grpc.testing.ClientConfig.prototype.getMessagesPerStream = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.grpc.testing.ClientConfig.prototype.setMessagesPerStream = function(value) {
  jspb.Message.setField(this, 18, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ClientStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ClientStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ClientStatus.displayName = 'proto.grpc.testing.ClientStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ClientStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ClientStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ClientStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ClientStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    stats: (f = msg.getStats()) && stats_pb.ClientStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ClientStatus}
 */
proto.grpc.testing.ClientStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ClientStatus;
  return proto.grpc.testing.ClientStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ClientStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ClientStatus}
 */
proto.grpc.testing.ClientStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stats_pb.ClientStats;
      reader.readMessage(value,stats_pb.ClientStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ClientStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ClientStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ClientStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ClientStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stats_pb.ClientStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientStats stats = 1;
 * @return {?proto.grpc.testing.ClientStats}
 */
proto.grpc.testing.ClientStatus.prototype.getStats = function() {
  return /** @type{?proto.grpc.testing.ClientStats} */ (
    jspb.Message.getWrapperField(this, stats_pb.ClientStats, 1));
};


/** @param {?proto.grpc.testing.ClientStats|undefined} value */
proto.grpc.testing.ClientStatus.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.testing.ClientStatus.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientStatus.prototype.hasStats = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Mark = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.Mark, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.Mark.displayName = 'proto.grpc.testing.Mark';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Mark.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Mark.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Mark} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.Mark.toObject = function(includeInstance, msg) {
  var f, obj = {
    reset: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Mark}
 */
proto.grpc.testing.Mark.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Mark;
  return proto.grpc.testing.Mark.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Mark} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Mark}
 */
proto.grpc.testing.Mark.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Mark.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Mark.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Mark} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.Mark.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReset();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool reset = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpc.testing.Mark.prototype.getReset = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.grpc.testing.Mark.prototype.setReset = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ClientArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.testing.ClientArgs.oneofGroups_);
};
goog.inherits(proto.grpc.testing.ClientArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ClientArgs.displayName = 'proto.grpc.testing.ClientArgs';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.testing.ClientArgs.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpc.testing.ClientArgs.ArgtypeCase = {
  ARGTYPE_NOT_SET: 0,
  SETUP: 1,
  MARK: 2
};

/**
 * @return {proto.grpc.testing.ClientArgs.ArgtypeCase}
 */
proto.grpc.testing.ClientArgs.prototype.getArgtypeCase = function() {
  return /** @type {proto.grpc.testing.ClientArgs.ArgtypeCase} */(jspb.Message.computeOneofCase(this, proto.grpc.testing.ClientArgs.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ClientArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ClientArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ClientArgs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ClientArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.grpc.testing.ClientConfig.toObject(includeInstance, f),
    mark: (f = msg.getMark()) && proto.grpc.testing.Mark.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ClientArgs}
 */
proto.grpc.testing.ClientArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ClientArgs;
  return proto.grpc.testing.ClientArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ClientArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ClientArgs}
 */
proto.grpc.testing.ClientArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.ClientConfig;
      reader.readMessage(value,proto.grpc.testing.ClientConfig.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    case 2:
      var value = new proto.grpc.testing.Mark;
      reader.readMessage(value,proto.grpc.testing.Mark.deserializeBinaryFromReader);
      msg.setMark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ClientArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ClientArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ClientArgs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ClientArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.ClientConfig.serializeBinaryToWriter
    );
  }
  f = message.getMark();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.Mark.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientConfig setup = 1;
 * @return {?proto.grpc.testing.ClientConfig}
 */
proto.grpc.testing.ClientArgs.prototype.getSetup = function() {
  return /** @type{?proto.grpc.testing.ClientConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ClientConfig, 1));
};


/** @param {?proto.grpc.testing.ClientConfig|undefined} value */
proto.grpc.testing.ClientArgs.prototype.setSetup = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.testing.ClientArgs.oneofGroups_[0], value);
};


proto.grpc.testing.ClientArgs.prototype.clearSetup = function() {
  this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientArgs.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Mark mark = 2;
 * @return {?proto.grpc.testing.Mark}
 */
proto.grpc.testing.ClientArgs.prototype.getMark = function() {
  return /** @type{?proto.grpc.testing.Mark} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Mark, 2));
};


/** @param {?proto.grpc.testing.Mark|undefined} value */
proto.grpc.testing.ClientArgs.prototype.setMark = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.testing.ClientArgs.oneofGroups_[0], value);
};


proto.grpc.testing.ClientArgs.prototype.clearMark = function() {
  this.setMark(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ClientArgs.prototype.hasMark = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ServerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.ServerConfig.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.ServerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ServerConfig.displayName = 'proto.grpc.testing.ServerConfig';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.ServerConfig.repeatedFields_ = [10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ServerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ServerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ServerConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ServerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    securityParams: (f = msg.getSecurityParams()) && proto.grpc.testing.SecurityParams.toObject(includeInstance, f),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0),
    asyncServerThreads: jspb.Message.getFieldWithDefault(msg, 7, 0),
    coreLimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    payloadConfig: (f = msg.getPayloadConfig()) && payloads_pb.PayloadConfig.toObject(includeInstance, f),
    coreListList: jspb.Message.getField(msg, 10),
    otherServerApi: jspb.Message.getFieldWithDefault(msg, 11, ""),
    resourceQuotaSize: jspb.Message.getFieldWithDefault(msg, 1001, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ServerConfig}
 */
proto.grpc.testing.ServerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ServerConfig;
  return proto.grpc.testing.ServerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ServerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ServerConfig}
 */
proto.grpc.testing.ServerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.grpc.testing.ServerType} */ (reader.readEnum());
      msg.setServerType(value);
      break;
    case 2:
      var value = new proto.grpc.testing.SecurityParams;
      reader.readMessage(value,proto.grpc.testing.SecurityParams.deserializeBinaryFromReader);
      msg.setSecurityParams(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAsyncServerThreads(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoreLimit(value);
      break;
    case 9:
      var value = new payloads_pb.PayloadConfig;
      reader.readMessage(value,payloads_pb.PayloadConfig.deserializeBinaryFromReader);
      msg.setPayloadConfig(value);
      break;
    case 10:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCoreListList(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherServerApi(value);
      break;
    case 1001:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResourceQuotaSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ServerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ServerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ServerConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ServerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSecurityParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.SecurityParams.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAsyncServerThreads();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCoreLimit();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getPayloadConfig();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      payloads_pb.PayloadConfig.serializeBinaryToWriter
    );
  }
  f = message.getCoreListList();
  if (f.length > 0) {
    writer.writePackedInt32(
      10,
      f
    );
  }
  f = message.getOtherServerApi();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getResourceQuotaSize();
  if (f !== 0) {
    writer.writeInt32(
      1001,
      f
    );
  }
};


/**
 * optional ServerType server_type = 1;
 * @return {!proto.grpc.testing.ServerType}
 */
proto.grpc.testing.ServerConfig.prototype.getServerType = function() {
  return /** @type {!proto.grpc.testing.ServerType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.grpc.testing.ServerType} value */
proto.grpc.testing.ServerConfig.prototype.setServerType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional SecurityParams security_params = 2;
 * @return {?proto.grpc.testing.SecurityParams}
 */
proto.grpc.testing.ServerConfig.prototype.getSecurityParams = function() {
  return /** @type{?proto.grpc.testing.SecurityParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.SecurityParams, 2));
};


/** @param {?proto.grpc.testing.SecurityParams|undefined} value */
proto.grpc.testing.ServerConfig.prototype.setSecurityParams = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.testing.ServerConfig.prototype.clearSecurityParams = function() {
  this.setSecurityParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ServerConfig.prototype.hasSecurityParams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 port = 4;
 * @return {number}
 */
proto.grpc.testing.ServerConfig.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerConfig.prototype.setPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 async_server_threads = 7;
 * @return {number}
 */
proto.grpc.testing.ServerConfig.prototype.getAsyncServerThreads = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerConfig.prototype.setAsyncServerThreads = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 core_limit = 8;
 * @return {number}
 */
proto.grpc.testing.ServerConfig.prototype.getCoreLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerConfig.prototype.setCoreLimit = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional PayloadConfig payload_config = 9;
 * @return {?proto.grpc.testing.PayloadConfig}
 */
proto.grpc.testing.ServerConfig.prototype.getPayloadConfig = function() {
  return /** @type{?proto.grpc.testing.PayloadConfig} */ (
    jspb.Message.getWrapperField(this, payloads_pb.PayloadConfig, 9));
};


/** @param {?proto.grpc.testing.PayloadConfig|undefined} value */
proto.grpc.testing.ServerConfig.prototype.setPayloadConfig = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.grpc.testing.ServerConfig.prototype.clearPayloadConfig = function() {
  this.setPayloadConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ServerConfig.prototype.hasPayloadConfig = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated int32 core_list = 10;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.grpc.testing.ServerConfig.prototype.getCoreListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 10));
};


/** @param {!Array.<number>} value */
proto.grpc.testing.ServerConfig.prototype.setCoreListList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ServerConfig.prototype.addCoreList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.grpc.testing.ServerConfig.prototype.clearCoreListList = function() {
  this.setCoreListList([]);
};


/**
 * optional string other_server_api = 11;
 * @return {string}
 */
proto.grpc.testing.ServerConfig.prototype.getOtherServerApi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.grpc.testing.ServerConfig.prototype.setOtherServerApi = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 resource_quota_size = 1001;
 * @return {number}
 */
proto.grpc.testing.ServerConfig.prototype.getResourceQuotaSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1001, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerConfig.prototype.setResourceQuotaSize = function(value) {
  jspb.Message.setField(this, 1001, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ServerArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.testing.ServerArgs.oneofGroups_);
};
goog.inherits(proto.grpc.testing.ServerArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ServerArgs.displayName = 'proto.grpc.testing.ServerArgs';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.testing.ServerArgs.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.grpc.testing.ServerArgs.ArgtypeCase = {
  ARGTYPE_NOT_SET: 0,
  SETUP: 1,
  MARK: 2
};

/**
 * @return {proto.grpc.testing.ServerArgs.ArgtypeCase}
 */
proto.grpc.testing.ServerArgs.prototype.getArgtypeCase = function() {
  return /** @type {proto.grpc.testing.ServerArgs.ArgtypeCase} */(jspb.Message.computeOneofCase(this, proto.grpc.testing.ServerArgs.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ServerArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ServerArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ServerArgs} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ServerArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.grpc.testing.ServerConfig.toObject(includeInstance, f),
    mark: (f = msg.getMark()) && proto.grpc.testing.Mark.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ServerArgs}
 */
proto.grpc.testing.ServerArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ServerArgs;
  return proto.grpc.testing.ServerArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ServerArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ServerArgs}
 */
proto.grpc.testing.ServerArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.ServerConfig;
      reader.readMessage(value,proto.grpc.testing.ServerConfig.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    case 2:
      var value = new proto.grpc.testing.Mark;
      reader.readMessage(value,proto.grpc.testing.Mark.deserializeBinaryFromReader);
      msg.setMark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ServerArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ServerArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ServerArgs} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ServerArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.ServerConfig.serializeBinaryToWriter
    );
  }
  f = message.getMark();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.Mark.serializeBinaryToWriter
    );
  }
};


/**
 * optional ServerConfig setup = 1;
 * @return {?proto.grpc.testing.ServerConfig}
 */
proto.grpc.testing.ServerArgs.prototype.getSetup = function() {
  return /** @type{?proto.grpc.testing.ServerConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ServerConfig, 1));
};


/** @param {?proto.grpc.testing.ServerConfig|undefined} value */
proto.grpc.testing.ServerArgs.prototype.setSetup = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.testing.ServerArgs.oneofGroups_[0], value);
};


proto.grpc.testing.ServerArgs.prototype.clearSetup = function() {
  this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ServerArgs.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Mark mark = 2;
 * @return {?proto.grpc.testing.Mark}
 */
proto.grpc.testing.ServerArgs.prototype.getMark = function() {
  return /** @type{?proto.grpc.testing.Mark} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Mark, 2));
};


/** @param {?proto.grpc.testing.Mark|undefined} value */
proto.grpc.testing.ServerArgs.prototype.setMark = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.testing.ServerArgs.oneofGroups_[0], value);
};


proto.grpc.testing.ServerArgs.prototype.clearMark = function() {
  this.setMark(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ServerArgs.prototype.hasMark = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ServerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ServerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ServerStatus.displayName = 'proto.grpc.testing.ServerStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ServerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ServerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ServerStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ServerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    stats: (f = msg.getStats()) && stats_pb.ServerStats.toObject(includeInstance, f),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cores: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ServerStatus}
 */
proto.grpc.testing.ServerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ServerStatus;
  return proto.grpc.testing.ServerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ServerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ServerStatus}
 */
proto.grpc.testing.ServerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new stats_pb.ServerStats;
      reader.readMessage(value,stats_pb.ServerStats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ServerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ServerStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ServerStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ServerStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      stats_pb.ServerStats.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCores();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional ServerStats stats = 1;
 * @return {?proto.grpc.testing.ServerStats}
 */
proto.grpc.testing.ServerStatus.prototype.getStats = function() {
  return /** @type{?proto.grpc.testing.ServerStats} */ (
    jspb.Message.getWrapperField(this, stats_pb.ServerStats, 1));
};


/** @param {?proto.grpc.testing.ServerStats|undefined} value */
proto.grpc.testing.ServerStatus.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.testing.ServerStatus.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ServerStatus.prototype.hasStats = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.grpc.testing.ServerStatus.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerStatus.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 cores = 3;
 * @return {number}
 */
proto.grpc.testing.ServerStatus.prototype.getCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.testing.ServerStatus.prototype.setCores = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.CoreRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.CoreRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.CoreRequest.displayName = 'proto.grpc.testing.CoreRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.CoreRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.CoreRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.CoreRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.CoreRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.CoreRequest}
 */
proto.grpc.testing.CoreRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.CoreRequest;
  return proto.grpc.testing.CoreRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.CoreRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.CoreRequest}
 */
proto.grpc.testing.CoreRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.CoreRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.CoreRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.CoreRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.CoreRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.CoreResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.CoreResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.CoreResponse.displayName = 'proto.grpc.testing.CoreResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.CoreResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.CoreResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.CoreResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.CoreResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cores: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.CoreResponse}
 */
proto.grpc.testing.CoreResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.CoreResponse;
  return proto.grpc.testing.CoreResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.CoreResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.CoreResponse}
 */
proto.grpc.testing.CoreResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.CoreResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.CoreResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.CoreResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.CoreResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCores();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 cores = 1;
 * @return {number}
 */
proto.grpc.testing.CoreResponse.prototype.getCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.testing.CoreResponse.prototype.setCores = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.Void.displayName = 'proto.grpc.testing.Void';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Void} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Void}
 */
proto.grpc.testing.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Void;
  return proto.grpc.testing.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Void}
 */
proto.grpc.testing.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Void} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Scenario = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.Scenario, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.Scenario.displayName = 'proto.grpc.testing.Scenario';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Scenario.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Scenario.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Scenario} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.Scenario.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientConfig: (f = msg.getClientConfig()) && proto.grpc.testing.ClientConfig.toObject(includeInstance, f),
    numClients: jspb.Message.getFieldWithDefault(msg, 3, 0),
    serverConfig: (f = msg.getServerConfig()) && proto.grpc.testing.ServerConfig.toObject(includeInstance, f),
    numServers: jspb.Message.getFieldWithDefault(msg, 5, 0),
    warmupSeconds: jspb.Message.getFieldWithDefault(msg, 6, 0),
    benchmarkSeconds: jspb.Message.getFieldWithDefault(msg, 7, 0),
    spawnLocalWorkerCount: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Scenario}
 */
proto.grpc.testing.Scenario.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Scenario;
  return proto.grpc.testing.Scenario.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Scenario} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Scenario}
 */
proto.grpc.testing.Scenario.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.grpc.testing.ClientConfig;
      reader.readMessage(value,proto.grpc.testing.ClientConfig.deserializeBinaryFromReader);
      msg.setClientConfig(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumClients(value);
      break;
    case 4:
      var value = new proto.grpc.testing.ServerConfig;
      reader.readMessage(value,proto.grpc.testing.ServerConfig.deserializeBinaryFromReader);
      msg.setServerConfig(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumServers(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWarmupSeconds(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBenchmarkSeconds(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpawnLocalWorkerCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Scenario.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Scenario.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Scenario} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.Scenario.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.ClientConfig.serializeBinaryToWriter
    );
  }
  f = message.getNumClients();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getServerConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.grpc.testing.ServerConfig.serializeBinaryToWriter
    );
  }
  f = message.getNumServers();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWarmupSeconds();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getBenchmarkSeconds();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getSpawnLocalWorkerCount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.grpc.testing.Scenario.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.grpc.testing.Scenario.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ClientConfig client_config = 2;
 * @return {?proto.grpc.testing.ClientConfig}
 */
proto.grpc.testing.Scenario.prototype.getClientConfig = function() {
  return /** @type{?proto.grpc.testing.ClientConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ClientConfig, 2));
};


/** @param {?proto.grpc.testing.ClientConfig|undefined} value */
proto.grpc.testing.Scenario.prototype.setClientConfig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.testing.Scenario.prototype.clearClientConfig = function() {
  this.setClientConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.Scenario.prototype.hasClientConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 num_clients = 3;
 * @return {number}
 */
proto.grpc.testing.Scenario.prototype.getNumClients = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grpc.testing.Scenario.prototype.setNumClients = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional ServerConfig server_config = 4;
 * @return {?proto.grpc.testing.ServerConfig}
 */
proto.grpc.testing.Scenario.prototype.getServerConfig = function() {
  return /** @type{?proto.grpc.testing.ServerConfig} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ServerConfig, 4));
};


/** @param {?proto.grpc.testing.ServerConfig|undefined} value */
proto.grpc.testing.Scenario.prototype.setServerConfig = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.grpc.testing.Scenario.prototype.clearServerConfig = function() {
  this.setServerConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.Scenario.prototype.hasServerConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 num_servers = 5;
 * @return {number}
 */
proto.grpc.testing.Scenario.prototype.getNumServers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.grpc.testing.Scenario.prototype.setNumServers = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 warmup_seconds = 6;
 * @return {number}
 */
proto.grpc.testing.Scenario.prototype.getWarmupSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.grpc.testing.Scenario.prototype.setWarmupSeconds = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 benchmark_seconds = 7;
 * @return {number}
 */
proto.grpc.testing.Scenario.prototype.getBenchmarkSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.grpc.testing.Scenario.prototype.setBenchmarkSeconds = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 spawn_local_worker_count = 8;
 * @return {number}
 */
proto.grpc.testing.Scenario.prototype.getSpawnLocalWorkerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.grpc.testing.Scenario.prototype.setSpawnLocalWorkerCount = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.Scenarios = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.Scenarios.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.Scenarios, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.Scenarios.displayName = 'proto.grpc.testing.Scenarios';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.Scenarios.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.Scenarios.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.Scenarios.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.Scenarios} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.Scenarios.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenariosList: jspb.Message.toObjectList(msg.getScenariosList(),
    proto.grpc.testing.Scenario.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.Scenarios}
 */
proto.grpc.testing.Scenarios.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.Scenarios;
  return proto.grpc.testing.Scenarios.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.Scenarios} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.Scenarios}
 */
proto.grpc.testing.Scenarios.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Scenario;
      reader.readMessage(value,proto.grpc.testing.Scenario.deserializeBinaryFromReader);
      msg.addScenarios(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.Scenarios.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.Scenarios.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.Scenarios} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.Scenarios.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScenariosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grpc.testing.Scenario.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Scenario scenarios = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpc.testing.Scenario>}
 */
proto.grpc.testing.Scenarios.prototype.getScenariosList = function() {
  return /** @type{!Array.<!proto.grpc.testing.Scenario>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpc.testing.Scenario, 1));
};


/** @param {!Array.<!proto.grpc.testing.Scenario>} value */
proto.grpc.testing.Scenarios.prototype.setScenariosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grpc.testing.Scenario=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.Scenario}
 */
proto.grpc.testing.Scenarios.prototype.addScenarios = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grpc.testing.Scenario, opt_index);
};


proto.grpc.testing.Scenarios.prototype.clearScenariosList = function() {
  this.setScenariosList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ScenarioResultSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ScenarioResultSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ScenarioResultSummary.displayName = 'proto.grpc.testing.ScenarioResultSummary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ScenarioResultSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ScenarioResultSummary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ScenarioResultSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    qps: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    qpsPerServerCore: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    serverSystemTime: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    serverUserTime: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    clientSystemTime: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    clientUserTime: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    latency50: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    latency90: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    latency95: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    latency99: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    latency999: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    serverCpuUsage: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    successfulRequestsPerSecond: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    failedRequestsPerSecond: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    clientPollsPerRequest: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    serverPollsPerRequest: +jspb.Message.getFieldWithDefault(msg, 16, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ScenarioResultSummary}
 */
proto.grpc.testing.ScenarioResultSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ScenarioResultSummary;
  return proto.grpc.testing.ScenarioResultSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ScenarioResultSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ScenarioResultSummary}
 */
proto.grpc.testing.ScenarioResultSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQps(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQpsPerServerCore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerSystemTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerUserTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClientSystemTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClientUserTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatency50(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatency90(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatency95(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatency99(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatency999(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerCpuUsage(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSuccessfulRequestsPerSecond(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFailedRequestsPerSecond(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClientPollsPerRequest(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setServerPollsPerRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ScenarioResultSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ScenarioResultSummary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ScenarioResultSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQps();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getQpsPerServerCore();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getServerSystemTime();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getServerUserTime();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getClientSystemTime();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getClientUserTime();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getLatency50();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getLatency90();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getLatency95();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getLatency99();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getLatency999();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getServerCpuUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getSuccessfulRequestsPerSecond();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getFailedRequestsPerSecond();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getClientPollsPerRequest();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getServerPollsPerRequest();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
};


/**
 * optional double qps = 1;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getQps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setQps = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double qps_per_server_core = 2;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getQpsPerServerCore = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setQpsPerServerCore = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double server_system_time = 3;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getServerSystemTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setServerSystemTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double server_user_time = 4;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getServerUserTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setServerUserTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double client_system_time = 5;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getClientSystemTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setClientSystemTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double client_user_time = 6;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getClientUserTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setClientUserTime = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional double latency_50 = 7;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getLatency50 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setLatency50 = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional double latency_90 = 8;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getLatency90 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setLatency90 = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional double latency_95 = 9;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getLatency95 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setLatency95 = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional double latency_99 = 10;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getLatency99 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setLatency99 = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional double latency_999 = 11;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getLatency999 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setLatency999 = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional double server_cpu_usage = 12;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getServerCpuUsage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setServerCpuUsage = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional double successful_requests_per_second = 13;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getSuccessfulRequestsPerSecond = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setSuccessfulRequestsPerSecond = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional double failed_requests_per_second = 14;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getFailedRequestsPerSecond = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setFailedRequestsPerSecond = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional double client_polls_per_request = 15;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getClientPollsPerRequest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setClientPollsPerRequest = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional double server_polls_per_request = 16;
 * @return {number}
 */
proto.grpc.testing.ScenarioResultSummary.prototype.getServerPollsPerRequest = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.grpc.testing.ScenarioResultSummary.prototype.setServerPollsPerRequest = function(value) {
  jspb.Message.setField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ScenarioResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpc.testing.ScenarioResult.repeatedFields_, null);
};
goog.inherits(proto.grpc.testing.ScenarioResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ScenarioResult.displayName = 'proto.grpc.testing.ScenarioResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpc.testing.ScenarioResult.repeatedFields_ = [3,4,5,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ScenarioResult.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ScenarioResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ScenarioResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ScenarioResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenario: (f = msg.getScenario()) && proto.grpc.testing.Scenario.toObject(includeInstance, f),
    latencies: (f = msg.getLatencies()) && stats_pb.HistogramData.toObject(includeInstance, f),
    clientStatsList: jspb.Message.toObjectList(msg.getClientStatsList(),
    stats_pb.ClientStats.toObject, includeInstance),
    serverStatsList: jspb.Message.toObjectList(msg.getServerStatsList(),
    stats_pb.ServerStats.toObject, includeInstance),
    serverCoresList: jspb.Message.getField(msg, 5),
    summary: (f = msg.getSummary()) && proto.grpc.testing.ScenarioResultSummary.toObject(includeInstance, f),
    clientSuccessList: jspb.Message.getField(msg, 7),
    serverSuccessList: jspb.Message.getField(msg, 8),
    requestResultsList: jspb.Message.toObjectList(msg.getRequestResultsList(),
    stats_pb.RequestResultCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ScenarioResult}
 */
proto.grpc.testing.ScenarioResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ScenarioResult;
  return proto.grpc.testing.ScenarioResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ScenarioResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ScenarioResult}
 */
proto.grpc.testing.ScenarioResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.Scenario;
      reader.readMessage(value,proto.grpc.testing.Scenario.deserializeBinaryFromReader);
      msg.setScenario(value);
      break;
    case 2:
      var value = new stats_pb.HistogramData;
      reader.readMessage(value,stats_pb.HistogramData.deserializeBinaryFromReader);
      msg.setLatencies(value);
      break;
    case 3:
      var value = new stats_pb.ClientStats;
      reader.readMessage(value,stats_pb.ClientStats.deserializeBinaryFromReader);
      msg.addClientStats(value);
      break;
    case 4:
      var value = new stats_pb.ServerStats;
      reader.readMessage(value,stats_pb.ServerStats.deserializeBinaryFromReader);
      msg.addServerStats(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setServerCoresList(value);
      break;
    case 6:
      var value = new proto.grpc.testing.ScenarioResultSummary;
      reader.readMessage(value,proto.grpc.testing.ScenarioResultSummary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 7:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setClientSuccessList(value);
      break;
    case 8:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setServerSuccessList(value);
      break;
    case 9:
      var value = new stats_pb.RequestResultCount;
      reader.readMessage(value,stats_pb.RequestResultCount.deserializeBinaryFromReader);
      msg.addRequestResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ScenarioResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ScenarioResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ScenarioResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ScenarioResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScenario();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.Scenario.serializeBinaryToWriter
    );
  }
  f = message.getLatencies();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      stats_pb.HistogramData.serializeBinaryToWriter
    );
  }
  f = message.getClientStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      stats_pb.ClientStats.serializeBinaryToWriter
    );
  }
  f = message.getServerStatsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      stats_pb.ServerStats.serializeBinaryToWriter
    );
  }
  f = message.getServerCoresList();
  if (f.length > 0) {
    writer.writePackedInt32(
      5,
      f
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.grpc.testing.ScenarioResultSummary.serializeBinaryToWriter
    );
  }
  f = message.getClientSuccessList();
  if (f.length > 0) {
    writer.writePackedBool(
      7,
      f
    );
  }
  f = message.getServerSuccessList();
  if (f.length > 0) {
    writer.writePackedBool(
      8,
      f
    );
  }
  f = message.getRequestResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      stats_pb.RequestResultCount.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scenario scenario = 1;
 * @return {?proto.grpc.testing.Scenario}
 */
proto.grpc.testing.ScenarioResult.prototype.getScenario = function() {
  return /** @type{?proto.grpc.testing.Scenario} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.Scenario, 1));
};


/** @param {?proto.grpc.testing.Scenario|undefined} value */
proto.grpc.testing.ScenarioResult.prototype.setScenario = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpc.testing.ScenarioResult.prototype.clearScenario = function() {
  this.setScenario(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ScenarioResult.prototype.hasScenario = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HistogramData latencies = 2;
 * @return {?proto.grpc.testing.HistogramData}
 */
proto.grpc.testing.ScenarioResult.prototype.getLatencies = function() {
  return /** @type{?proto.grpc.testing.HistogramData} */ (
    jspb.Message.getWrapperField(this, stats_pb.HistogramData, 2));
};


/** @param {?proto.grpc.testing.HistogramData|undefined} value */
proto.grpc.testing.ScenarioResult.prototype.setLatencies = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.grpc.testing.ScenarioResult.prototype.clearLatencies = function() {
  this.setLatencies(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ScenarioResult.prototype.hasLatencies = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ClientStats client_stats = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpc.testing.ClientStats>}
 */
proto.grpc.testing.ScenarioResult.prototype.getClientStatsList = function() {
  return /** @type{!Array.<!proto.grpc.testing.ClientStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, stats_pb.ClientStats, 3));
};


/** @param {!Array.<!proto.grpc.testing.ClientStats>} value */
proto.grpc.testing.ScenarioResult.prototype.setClientStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.grpc.testing.ClientStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.ClientStats}
 */
proto.grpc.testing.ScenarioResult.prototype.addClientStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.grpc.testing.ClientStats, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearClientStatsList = function() {
  this.setClientStatsList([]);
};


/**
 * repeated ServerStats server_stats = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpc.testing.ServerStats>}
 */
proto.grpc.testing.ScenarioResult.prototype.getServerStatsList = function() {
  return /** @type{!Array.<!proto.grpc.testing.ServerStats>} */ (
    jspb.Message.getRepeatedWrapperField(this, stats_pb.ServerStats, 4));
};


/** @param {!Array.<!proto.grpc.testing.ServerStats>} value */
proto.grpc.testing.ScenarioResult.prototype.setServerStatsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.grpc.testing.ServerStats=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.ServerStats}
 */
proto.grpc.testing.ScenarioResult.prototype.addServerStats = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.grpc.testing.ServerStats, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearServerStatsList = function() {
  this.setServerStatsList([]);
};


/**
 * repeated int32 server_cores = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.grpc.testing.ScenarioResult.prototype.getServerCoresList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<number>} value */
proto.grpc.testing.ScenarioResult.prototype.setServerCoresList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ScenarioResult.prototype.addServerCores = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearServerCoresList = function() {
  this.setServerCoresList([]);
};


/**
 * optional ScenarioResultSummary summary = 6;
 * @return {?proto.grpc.testing.ScenarioResultSummary}
 */
proto.grpc.testing.ScenarioResult.prototype.getSummary = function() {
  return /** @type{?proto.grpc.testing.ScenarioResultSummary} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ScenarioResultSummary, 6));
};


/** @param {?proto.grpc.testing.ScenarioResultSummary|undefined} value */
proto.grpc.testing.ScenarioResult.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.grpc.testing.ScenarioResult.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.ScenarioResult.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated bool client_success = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.grpc.testing.ScenarioResult.prototype.getClientSuccessList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 7));
};


/** @param {!Array.<boolean>} value */
proto.grpc.testing.ScenarioResult.prototype.setClientSuccessList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ScenarioResult.prototype.addClientSuccess = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearClientSuccessList = function() {
  this.setClientSuccessList([]);
};


/**
 * repeated bool server_success = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<boolean>}
 */
proto.grpc.testing.ScenarioResult.prototype.getServerSuccessList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getField(this, 8));
};


/** @param {!Array.<boolean>} value */
proto.grpc.testing.ScenarioResult.prototype.setServerSuccessList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.grpc.testing.ScenarioResult.prototype.addServerSuccess = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearServerSuccessList = function() {
  this.setServerSuccessList([]);
};


/**
 * repeated RequestResultCount request_results = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpc.testing.RequestResultCount>}
 */
proto.grpc.testing.ScenarioResult.prototype.getRequestResultsList = function() {
  return /** @type{!Array.<!proto.grpc.testing.RequestResultCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, stats_pb.RequestResultCount, 9));
};


/** @param {!Array.<!proto.grpc.testing.RequestResultCount>} value */
proto.grpc.testing.ScenarioResult.prototype.setRequestResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.grpc.testing.RequestResultCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpc.testing.RequestResultCount}
 */
proto.grpc.testing.ScenarioResult.prototype.addRequestResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.grpc.testing.RequestResultCount, opt_index);
};


proto.grpc.testing.ScenarioResult.prototype.clearRequestResultsList = function() {
  this.setRequestResultsList([]);
};


/**
 * @enum {number}
 */
proto.grpc.testing.ClientType = {
  SYNC_CLIENT: 0,
  ASYNC_CLIENT: 1,
  OTHER_CLIENT: 2
};

/**
 * @enum {number}
 */
proto.grpc.testing.ServerType = {
  SYNC_SERVER: 0,
  ASYNC_SERVER: 1,
  ASYNC_GENERIC_SERVER: 2,
  OTHER_SERVER: 3
};

/**
 * @enum {number}
 */
proto.grpc.testing.RpcType = {
  UNARY: 0,
  STREAMING: 1,
  STREAMING_FROM_CLIENT: 2,
  STREAMING_FROM_SERVER: 3,
  STREAMING_BOTH_WAYS: 4
};

goog.object.extend(exports, proto.grpc.testing);
