/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpc.testing.ByteBufferParams', null, global);
goog.exportSymbol('proto.grpc.testing.ComplexProtoParams', null, global);
goog.exportSymbol('proto.grpc.testing.PayloadConfig', null, global);
goog.exportSymbol('proto.grpc.testing.SimpleProtoParams', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ByteBufferParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ByteBufferParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ByteBufferParams.displayName = 'proto.grpc.testing.ByteBufferParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ByteBufferParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ByteBufferParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ByteBufferParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ByteBufferParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    respSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ByteBufferParams}
 */
proto.grpc.testing.ByteBufferParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ByteBufferParams;
  return proto.grpc.testing.ByteBufferParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ByteBufferParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ByteBufferParams}
 */
proto.grpc.testing.ByteBufferParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReqSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRespSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ByteBufferParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ByteBufferParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ByteBufferParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ByteBufferParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRespSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 req_size = 1;
 * @return {number}
 */
proto.grpc.testing.ByteBufferParams.prototype.getReqSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.testing.ByteBufferParams.prototype.setReqSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 resp_size = 2;
 * @return {number}
 */
proto.grpc.testing.ByteBufferParams.prototype.getRespSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.testing.ByteBufferParams.prototype.setRespSize = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.SimpleProtoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.SimpleProtoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.SimpleProtoParams.displayName = 'proto.grpc.testing.SimpleProtoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.SimpleProtoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.SimpleProtoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.SimpleProtoParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.SimpleProtoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    respSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.SimpleProtoParams}
 */
proto.grpc.testing.SimpleProtoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.SimpleProtoParams;
  return proto.grpc.testing.SimpleProtoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.SimpleProtoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.SimpleProtoParams}
 */
proto.grpc.testing.SimpleProtoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReqSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRespSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.SimpleProtoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.SimpleProtoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.SimpleProtoParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.SimpleProtoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqSize();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRespSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 req_size = 1;
 * @return {number}
 */
proto.grpc.testing.SimpleProtoParams.prototype.getReqSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpc.testing.SimpleProtoParams.prototype.setReqSize = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 resp_size = 2;
 * @return {number}
 */
proto.grpc.testing.SimpleProtoParams.prototype.getRespSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpc.testing.SimpleProtoParams.prototype.setRespSize = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.ComplexProtoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpc.testing.ComplexProtoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.ComplexProtoParams.displayName = 'proto.grpc.testing.ComplexProtoParams';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.ComplexProtoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.ComplexProtoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.ComplexProtoParams} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.ComplexProtoParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.ComplexProtoParams}
 */
proto.grpc.testing.ComplexProtoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.ComplexProtoParams;
  return proto.grpc.testing.ComplexProtoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.ComplexProtoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.ComplexProtoParams}
 */
proto.grpc.testing.ComplexProtoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.ComplexProtoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.ComplexProtoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.ComplexProtoParams} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.ComplexProtoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpc.testing.PayloadConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.grpc.testing.PayloadConfig.oneofGroups_);
};
goog.inherits(proto.grpc.testing.PayloadConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpc.testing.PayloadConfig.displayName = 'proto.grpc.testing.PayloadConfig';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.grpc.testing.PayloadConfig.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.grpc.testing.PayloadConfig.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  BYTEBUF_PARAMS: 1,
  SIMPLE_PARAMS: 2,
  COMPLEX_PARAMS: 3
};

/**
 * @return {proto.grpc.testing.PayloadConfig.PayloadCase}
 */
proto.grpc.testing.PayloadConfig.prototype.getPayloadCase = function() {
  return /** @type {proto.grpc.testing.PayloadConfig.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.grpc.testing.PayloadConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpc.testing.PayloadConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.grpc.testing.PayloadConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpc.testing.PayloadConfig} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpc.testing.PayloadConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytebufParams: (f = msg.getBytebufParams()) && proto.grpc.testing.ByteBufferParams.toObject(includeInstance, f),
    simpleParams: (f = msg.getSimpleParams()) && proto.grpc.testing.SimpleProtoParams.toObject(includeInstance, f),
    complexParams: (f = msg.getComplexParams()) && proto.grpc.testing.ComplexProtoParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpc.testing.PayloadConfig}
 */
proto.grpc.testing.PayloadConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpc.testing.PayloadConfig;
  return proto.grpc.testing.PayloadConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpc.testing.PayloadConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpc.testing.PayloadConfig}
 */
proto.grpc.testing.PayloadConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpc.testing.ByteBufferParams;
      reader.readMessage(value,proto.grpc.testing.ByteBufferParams.deserializeBinaryFromReader);
      msg.setBytebufParams(value);
      break;
    case 2:
      var value = new proto.grpc.testing.SimpleProtoParams;
      reader.readMessage(value,proto.grpc.testing.SimpleProtoParams.deserializeBinaryFromReader);
      msg.setSimpleParams(value);
      break;
    case 3:
      var value = new proto.grpc.testing.ComplexProtoParams;
      reader.readMessage(value,proto.grpc.testing.ComplexProtoParams.deserializeBinaryFromReader);
      msg.setComplexParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpc.testing.PayloadConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grpc.testing.PayloadConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grpc.testing.PayloadConfig} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpc.testing.PayloadConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytebufParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpc.testing.ByteBufferParams.serializeBinaryToWriter
    );
  }
  f = message.getSimpleParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.grpc.testing.SimpleProtoParams.serializeBinaryToWriter
    );
  }
  f = message.getComplexParams();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.grpc.testing.ComplexProtoParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional ByteBufferParams bytebuf_params = 1;
 * @return {?proto.grpc.testing.ByteBufferParams}
 */
proto.grpc.testing.PayloadConfig.prototype.getBytebufParams = function() {
  return /** @type{?proto.grpc.testing.ByteBufferParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ByteBufferParams, 1));
};


/** @param {?proto.grpc.testing.ByteBufferParams|undefined} value */
proto.grpc.testing.PayloadConfig.prototype.setBytebufParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.grpc.testing.PayloadConfig.oneofGroups_[0], value);
};


proto.grpc.testing.PayloadConfig.prototype.clearBytebufParams = function() {
  this.setBytebufParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.PayloadConfig.prototype.hasBytebufParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SimpleProtoParams simple_params = 2;
 * @return {?proto.grpc.testing.SimpleProtoParams}
 */
proto.grpc.testing.PayloadConfig.prototype.getSimpleParams = function() {
  return /** @type{?proto.grpc.testing.SimpleProtoParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.SimpleProtoParams, 2));
};


/** @param {?proto.grpc.testing.SimpleProtoParams|undefined} value */
proto.grpc.testing.PayloadConfig.prototype.setSimpleParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.grpc.testing.PayloadConfig.oneofGroups_[0], value);
};


proto.grpc.testing.PayloadConfig.prototype.clearSimpleParams = function() {
  this.setSimpleParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.PayloadConfig.prototype.hasSimpleParams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ComplexProtoParams complex_params = 3;
 * @return {?proto.grpc.testing.ComplexProtoParams}
 */
proto.grpc.testing.PayloadConfig.prototype.getComplexParams = function() {
  return /** @type{?proto.grpc.testing.ComplexProtoParams} */ (
    jspb.Message.getWrapperField(this, proto.grpc.testing.ComplexProtoParams, 3));
};


/** @param {?proto.grpc.testing.ComplexProtoParams|undefined} value */
proto.grpc.testing.PayloadConfig.prototype.setComplexParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.grpc.testing.PayloadConfig.oneofGroups_[0], value);
};


proto.grpc.testing.PayloadConfig.prototype.clearComplexParams = function() {
  this.setComplexParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpc.testing.PayloadConfig.prototype.hasComplexParams = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.grpc.testing);
